#!/usr/bin/env groovy
pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
        timeout(time: 1, unit: 'HOURS')
        timestamps()
    }

    tools {
        jdk 'Java JDK 8u221'
        maven 'maven 3.6.3'
        dockerTool 'docker-latest'
    }

    environment {
        AWS_ECR_REGION = 'eu-west-1'
        AWS_ECR_URL = '480184259951.dkr.ecr.eu-west-1.amazonaws.com'
    }

    stages {
        stage('Build') {
            steps {
                dir('cv_server') {
                    withMaven(options: [artifactsPublisher(), mavenLinkerPublisher(), dependenciesFingerprintPublisher(disabled: true), jacocoPublisher(disabled: true), junitPublisher(disabled: true)]) {
                        sh "mvn -B -U clean package"
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('cv_server') {
                    script {
                        docker.build("${AWS_ECR_URL}/tile:latest", "--build-arg JAR_FILE=${getJarName()} .")
                    }
                }
            }
        }

        stage('Deploy in ECS') {
            steps {
                dir('cv_server') {
                    withAWS(region: "${AWS_ECR_REGION}", credentials: 'personal-aws-ecr') {
                        script {
                            def login = ecrLogin()
                            sh "${login}"
                            docker.image("${AWS_ECR_URL}/tile:latest").push()
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            junit allowEmptyResults: true, testResults: 'cv_server/target/surfire-reports/*.xml'
            publishHTML([allowMissing: true, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'cv_server/target/site/jacoco-ut/', reportFiles: 'index.html', reportName: 'Unit Testing Coverage', reportTitles: 'Unit Testing Coverage'])
            jacoco(execPattern: 'cv_server/target/jacoco-ut.exec')
//            archiveArtifacts artifacts: 'cv_server/target/*.jar', fingerprint: true
            deleteDir()
            script {
                docker.image("${AWS_ECR_URL}/tile:latest").delete()
            }
        }
    }
}

def getJarName() {
    def pom = readMavenPom file: './cv_server/pom.xml'
    def version = pom.version
    def name = pom.name
    def jarName = name + '-' + version + '.jar'
    echo "jarName: ${jarName}"
    return  jarName
}
